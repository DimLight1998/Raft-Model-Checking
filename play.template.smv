MODULE node(nodeID, isNewest, eventType, eventSenderID, eventReceiverID, oracleSenderIsNewer, oracleLeaderSet)
VAR
  role: {Follower, Candidate, Leader};
  votedFor: -1 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
ASSIGN
  init(role) := Follower;
  init(votedFor) := -1;

  next(role) :=
    case
      next(eventType) = Noop: role;
      next(eventType) = Timeout:
        case
          next(eventSenderID) = nodeID: Candidate;
          next(eventSenderID) != nodeID: role;
        esac;
      next(eventType) = VoteReq:
        case
          next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): Follower;
          TRUE: role;
        esac;
      next(eventType) = VoteRsp:
        case
          next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): Follower;
          next(eventReceiverID) = nodeID & next(oracleSenderIsNewer) & next(oracleLeaderSet): Leader;
          TRUE: role;
        esac;
      TRUE: role;
    esac;
  next(votedFor) :=
    case
      role = Candidate: nodeID;
      next(eventType) = VoteReq & next(eventReceiverID) = nodeID: next(eventSenderID);
      TRUE: votedFor;
    esac;


MODULE main
VAR
  eventType: {Noop, Timeout, VoteReq, VoteRsp};
  eventSenderID: 0 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
  eventReceiverID: 0 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
  oracleSenderIsNewer: boolean;
  oracleLeaderSet: boolean;
  ⟨⟨⟨ python
  lines = []
  for i in range(⟨=numNode⟩):
    lines.append(f"isNewest{i}: boolean;")
  for i in range(⟨=numNode⟩):
    lines.append(f"node{i}: node({i}, isNewest{i}, eventType, eventSenderID, eventReceiverID, oracleSenderIsNewer, oracleLeaderSet);")
  print("\n".join(lines), end="")
  ⟩⟩⟩
ASSIGN
  init(eventType) := Noop;
  init(eventSenderID) := 0;
  init(eventReceiverID) := 0;
  init(oracleLeaderSet) := FALSE;

  next(eventType) :=
    case
      ⟨⟨⟨ python codegen.py
      (
        [
          ⟨⟨⟨ python
          lines = []
          for i in range(⟨=numNode⟩):
            lines.append(f'("node{i}.role = Candidate", ["VoteReq", "Timeout"]),')
          for i in range(⟨=numNode⟩):
            lines.append(f'("node{i}.role = Follower & node{i}.votedFor != -1", ["VoteRsp", "Timeout"]),')
          print("\n".join(lines), end="")
          ⟩⟩⟩
        ],
        ["Noop", "Timeout"]
      )
      ⟩⟩⟩
    esac;
  next(eventSenderID) :=
    case
      ⟨⟨⟨ python
      lines = []
      for i in range(0, ⟨=numNode⟩):
        lines.append(f"next(eventType) = VoteReq & node{i}.role = Candidate : {i};")
      for i in range(0, ⟨=numNode⟩):
        lines.append(f"next(eventType) = VoteRsp & node{i}.votedFor != -1   : {i};")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      next(eventType) = Timeout                          : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      TRUE                                               : 0;
    esac;
  next(eventReceiverID) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      lines += [f"next(eventType) = VoteReq & node{i}.role = Candidate : {{" + ", ".join(map(str, list(range(i + 1, numNode)) + list(range(i)))) + "};" for i in range(numNode)]
      lines += [f"next(eventType) = VoteRsp & node{i}.votedFor != -1   : node{i}.votedFor;" for i in range(numNode)]
      print("\n".join(lines), end="")
      ⟩⟩⟩
      next(eventType) = Noop                             : 0;
      next(eventType) = Timeout                          : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      TRUE                                               : 0;
    esac;
  next(oracleSenderIsNewer) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      for i in range(numNode):
        for j in range(numNode):
          if i != j:
            lines.append(f"next(eventType) = VoteReq & next(eventSenderID) = {i} & next(eventReceiverID) = {j} & isNewest{i} & !isNewest{j} : TRUE;")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      TRUE : FALSE;
    esac;
  next(oracleLeaderSet) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      numMajor = int(numNode / 2) if numNode % 2 == 0 else int(numNode / 2) + 1
      for candidate in range(numNode):
        conds = [f"node{voter}.votedFor = {candidate}" for voter in range(numNode)]
        lines.append(f"next(eventType) = VoteRsp & next(eventSenderID) = {candidate} & count({', '.join(conds)}) >= {numMajor}: TRUE;")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      TRUE : FALSE;
    esac;

  ⟨⟨⟨ python
  print("\n".join([f"init(isNewest{i}) := TRUE;" for i in range(⟨=numNode⟩)]), end="")
  ⟩⟩⟩

  ⟨⟨⟨ python
  numNode = ⟨=numNode⟩
  for i in range(numNode):
    excluded = list(range(i + 1, numNode)) + list(range(i))
    timeoutCases = "\n".join(map(lambda l: "  " * 4 + l, [f"next(eventSenderID) = {j} : isNewest{j} ? FALSE : isNewest{i};" for j in excluded]))
    reqRspCases = "\n".join(map(lambda l: "  " * 4 + l, [f"next(eventReceiverID) = {i} & next(eventSenderID) = {j} & isNewest{j}: TRUE;" for j in excluded]))
    template = \
  f"""
  next(isNewest{i}) :=
    case
      next(eventType) = Timeout:
        case
          next(eventSenderID) = {i} &  isNewest{i} : TRUE;
          next(eventSenderID) = {i} & !isNewest{i} : {{TRUE, FALSE}};
  {timeoutCases}
        esac;
      next(eventType) = VoteReq:
        case
  {reqRspCases}
          TRUE: isNewest{i};
        esac;
      next(eventType) = VoteRsp:
        case
  {reqRspCases}
          TRUE: isNewest{i};
        esac;
      next(eventType) = Noop: TRUE;
    esac;
  """
    print(template[1 : -1], end="")
    if i != numNode - 1:
      print()
  ⟩⟩⟩

CTLSPEC !AG(isNewest0 & isNewest1 & node0.role = Leader & node1.role = Leader)
-- CTLSPEC AG((eventType != Timeout))
-- CTLSPEC AG(eventType != VoteReq)
-- CTLSPEC !EF(eventType = VoteRsp)
-- CTLSPEC AG(node0.role = Follower & node0.votedFor != -1 -> !(EX eventType = VoteRsp))
-- CTLSPEC AG(node0.votedFor = -1)
-- CTLSPEC !EF(node0.votedFor = 1 & node1.votedFor = 1 & node2.votedFor = 1)
-- CTLSPEC !EF(count(node0.votedFor = 1, node1.votedFor = 1, node2.votedFor = 1) > 1)
-- CTLSPEC AG(node0.votedFor != 0)
-- CTLSPEC AG(node0.votedFor != 1)
-- CTLSPEC AG(node0.votedFor != 0)
-- CTLSPEC AG(node0.role != Leader);
-- SPEC AG(isNewest0 | isNewest1 | isNewest2)

