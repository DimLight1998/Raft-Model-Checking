MODULE node(nodeID, isNewest, eventType, eventSenderID, eventReceiverID, oracleSenderIsNewer, oracleWinMajority, oracleLogContent)
VAR
  role: {Follower, Candidate, Leader};
  votedFor: -1 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
  log: {LogEmpty, LastFoo, LastBar};
  logModification: {LogAppend, LogChange, LogNoMod};
ASSIGN
  init(role) := Follower;
  init(votedFor) := -1;
  init(log) := LogEmpty;
  init(logModification) := LogNoMod;

  next(role) :=
    case
      next(eventType) in {Noop, ClientReq}: role;
      next(eventType) = Timeout:
        case
          next(eventSenderID) = nodeID: Candidate;
          next(eventSenderID) != nodeID: role;
        esac;
      next(eventType) = VoteReq:
        case
          next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): Follower;
          TRUE: role;
        esac;
      next(eventType) = VoteRsp:
        case
          next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): Follower;
          next(eventReceiverID) = nodeID & next(oracleWinMajority): Leader;
          TRUE: role;
        esac;
      next(eventType) = AppendEReq &  next(oracleSenderIsNewer): Follower;
      next(eventType) = AppendEReq & !next(oracleSenderIsNewer): role;
    esac;
  next(votedFor) :=
    case
      next(role) = Candidate: nodeID;
      next(eventType) = VoteReq & next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): next(eventSenderID);
      TRUE: votedFor;
    esac;
  next(log) :=
    case
      next(eventType = ClientReq)  & next(eventReceiverID) = nodeID & role = Leader : oracleLogContent;
      next(eventType = AppendEReq) & next(eventReceiverID) = nodeID & next(oracleSenderIsNewer): oracleLogContent;
      TRUE: log;
    esac;
  next(logModification) :=
    case
      next(eventType = ClientReq)  & next(eventReceiverID) = nodeID & role = Leader : LogAppend;
      next(eventType = AppendEReq) & next(eventReceiverID) = nodeID &  next(oracleSenderIsNewer): {LogAppend, LogChange};
      next(eventType = AppendEReq) & next(eventReceiverID) = nodeID & !next(oracleSenderIsNewer): LogNoMod;
      TRUE: LogNoMod;
    esac;


MODULE main
VAR
  eventType: {Noop, Timeout, VoteReq, VoteRsp, ClientReq, AppendEReq};
  eventSenderID: 0 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
  eventReceiverID: 0 .. ⟨!echo $((⟨=numNode⟩ - 1))⟩;
  oracleSenderIsNewer: boolean;
  oracleWinMajority: boolean;
  oracleLogContent: {LastFoo, LastBar};
  ⟨⟨⟨ python
  lines = []
  for i in range(⟨=numNode⟩):
    lines.append(f"isNewest{i}: boolean;")
    lines.append(f"voteAcpt{i}: boolean;")
    lines.append(f"logUpToDate{i}: boolean;")
    lines.append(f"node{i}: node({i}, isNewest{i}, eventType, eventSenderID, eventReceiverID, oracleSenderIsNewer, oracleWinMajority, oracleLogContent);")
  print("\n".join(lines), end="")
  ⟩⟩⟩
ASSIGN
  init(eventType) := Noop;
  init(eventSenderID) := 0;
  init(eventReceiverID) := 0;
  init(oracleSenderIsNewer) := FALSE;
  init(oracleWinMajority) := FALSE;
  init(oracleLogContent) := LastFoo;

  next(eventType) :=
    case
      ⟨⟨⟨ python
      numNode = ⟨=numNode⟩
      leaderCases    = "\n  " + ",\n  ".join([f"node{i}.role = Leader & node{i}.log != LogEmpty"  for i in range(numNode)]) + "\n"
      candidateCases = "\n  " + ",\n  ".join([f"node{i}.role = Candidate"                         for i in range(numNode)]) + "\n"
      followerCases  = "\n  " + ",\n  ".join([f"node{i}.role = Follower & node{i}.votedFor != -1" for i in range(numNode)]) + "\n"
      print(f"count({leaderCases}) = 0 & count({candidateCases}) = 0 & count({followerCases}) = 0 : {{Timeout, Noop, ClientReq}};")
      print(f"count({leaderCases}) = 0 & count({candidateCases}) = 0 & count({followerCases}) > 0 : {{Timeout, Noop, ClientReq, VoteRsp}};")
      print(f"count({leaderCases}) = 0 & count({candidateCases}) > 0 & count({followerCases}) = 0 : {{Timeout, Noop, ClientReq, VoteReq}};")
      print(f"count({leaderCases}) = 0 & count({candidateCases}) > 0 & count({followerCases}) > 0 : {{Timeout, Noop, ClientReq, VoteReq, VoteRsp}};")
      print(f"count({leaderCases}) > 0 & count({candidateCases}) = 0 & count({followerCases}) = 0 : {{Timeout, Noop, ClientReq, AppendEReq}};")
      print(f"count({leaderCases}) > 0 & count({candidateCases}) = 0 & count({followerCases}) > 0 : {{Timeout, Noop, ClientReq, VoteRsp, AppendEReq}};")
      print(f"count({leaderCases}) > 0 & count({candidateCases}) > 0 & count({followerCases}) = 0 : {{Timeout, Noop, ClientReq, VoteReq, AppendEReq}};")
      print(f"count({leaderCases}) > 0 & count({candidateCases}) > 0 & count({followerCases}) > 0 : {{Timeout, Noop, ClientReq, VoteReq, VoteRsp, AppendEReq}};", end="")
      ⟩⟩⟩
    esac;
  next(eventSenderID) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      for i in range(0, numNode):
        lines.append(f"next(eventType) = VoteReq & node{i}.role = Candidate : {i};")
      for i in range(0, numNode):
        lines.append(f"next(eventType) = VoteRsp & node{i}.role = Follower & node{i}.votedFor != -1 : {i};")
      for i in range(0, numNode):
        lines.append(f"next(eventType) = AppendEReq & node{i}.role = Leader & node{i}.log != LogEmpty : {i};")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      next(eventType) = Timeout : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      next(eventType) = Noop    : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      TRUE                      : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
    esac;
  next(eventReceiverID) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      for i in range(numNode):
        lines.append(f"next(eventType) = VoteReq & next(eventSenderID) = {i} : {{" + ", ".join(map(str, list(range(i + 1, numNode)) + list(range(i)))) + "};")
      for i in range(numNode):
        lines.append(f"next(eventType) = VoteRsp & next(eventSenderID) = {i} & node{i}.votedFor != -1 : node{i}.votedFor;")
      for i in range(numNode):
        lines.append(f"next(eventType) = AppendEReq & next(eventSenderID) = {i} : {{" + ", ".join(map(str, list(range(i + 1, numNode)) + list(range(i)))) + "};")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      next(eventType) = ClientReq : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      next(eventType) = Timeout   : {⟨!python -c 'print(", ".join(map(str, range(⟨=numNode⟩))))'⟩};
      next(eventType) = Noop      : 0;
      TRUE                        : 0;
    esac;
  next(oracleSenderIsNewer) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      for i in range(numNode):
        for j in range(numNode):
          if i != j:
            lines.append(f"next(eventType) in {{VoteReq, VoteRsp, AppendEReq}} & next(eventSenderID) = {i} & next(eventReceiverID) = {j} & isNewest{i} & !isNewest{j} : TRUE;")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      TRUE : FALSE;
    esac;
  next(oracleWinMajority) :=
    case
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      numMajor = int(numNode / 2) + 1
      for candidate in range(numNode):
        conds = [f"\n    node{voter}.votedFor = {candidate} & voteAcpt{voter} & isNewest{voter}" for voter in range(numNode)]
        lines.append(f"next(eventType) = VoteRsp & next(eventReceiverID) = {candidate} & count({','.join(conds)}\n  ) >= {numMajor}: TRUE;")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      TRUE : FALSE;
    esac;
  next(oracleLogContent) :=
    case
      next(eventType = ClientReq) : {LastFoo, LastBar};
      ⟨⟨⟨ python
      lines = []
      numNode = ⟨=numNode⟩
      for i in range(numNode):
        lines.append(f"next(eventType = AppendEReq) & next(eventSenderID = {i}) & node{i}.log != LogEmpty : node{i}.log;")
      print("\n".join(lines), end="")
      ⟩⟩⟩
      TRUE: oracleLogContent;
    esac;

  ⟨⟨⟨ python
  print("\n".join([f"init(isNewest{i}) := TRUE;" for i in range(⟨=numNode⟩)]), end="")
  ⟩⟩⟩

  -- change isNewest for each node

  ⟨⟨⟨ python
  numNode = ⟨=numNode⟩
  for i in range(numNode):
    excluded = list(range(i + 1, numNode)) + list(range(i))
    timeoutCases = "\n".join(map(lambda l: "  " * 4 + l, [f"next(eventSenderID) = {j} : isNewest{j} ? FALSE : isNewest{i};" for j in excluded]))
    reqRspCases = "\n".join(map(lambda l: "  " * 4 + l, [f"next(eventReceiverID) = {i} & next(eventSenderID) = {j} & isNewest{j}: TRUE;" for j in excluded]))
    template = \
  f"""
  next(isNewest{i}) :=
    case
      next(eventType) = Timeout:
        case
          next(eventSenderID) = {i} &  isNewest{i} : TRUE;
          next(eventSenderID) = {i} & !isNewest{i} : {{TRUE, FALSE}};
  {timeoutCases}
        esac;
      next(eventType) in {{VoteReq, VoteRsp, AppendEReq}}:
        case
  {reqRspCases}
          TRUE: isNewest{i};
        esac;
      next(eventType) in {{Noop, ClientReq}}: isNewest{i};
    esac;
  """
    print(template[1 : -1], end="")
    if i != numNode - 1:
      print()
  ⟩⟩⟩

  -- change voteAcpt for each node

  ⟨⟨⟨ python
  print("\n".join([f"init(voteAcpt{i}) := FALSE;" for i in range(⟨=numNode⟩)]), end="")
  ⟩⟩⟩

  ⟨⟨⟨ python
  for i in range(⟨=numNode⟩):
    template = \
  f"""
  next(voteAcpt{i}) := case
    next(eventType) = VoteRsp & next(eventSenderID = {i}) : TRUE;
    next(node{i}.role = Candidate) : TRUE;
    !isNewest{i} & next(isNewest{i}) : FALSE;
    TRUE : voteAcpt{i};
  esac;
  """
    print(template[1 : -1], end="")
    if i != ⟨=numNode⟩ - 1:
      print()
  ⟩⟩⟩

  -- change logUpToDate for each node

  ⟨⟨⟨ python
  print("\n".join([f"init(logUpToDate{i}) := FALSE;" for i in range(⟨=numNode⟩)]), end="")
  ⟩⟩⟩

  ⟨⟨⟨ python
  for i in range(⟨=numNode⟩):
    template = \
  f"""
  next(logUpToDate{i}) := case
    next(eventType) = AppendEReq & next(eventReceiverID) = {i} & node{i}.logModification = LogAppend : TRUE;
    next(eventType) = ClientReq & next(eventReceiverID) = {i} & node{i}.role = Leader: TRUE;
    next(eventType) = ClientReq : FALSE;
    TRUE : logUpToDate{i};
  esac;
  """
    print(template[1 : -1], end="")
    if i != ⟨=numNode⟩ - 1:
      print()
  ⟩⟩⟩



-- 几种事件都有可能发生
CTLSPEC EF(eventType = Noop)
CTLSPEC EF(eventType = Timeout)
CTLSPEC EF(eventType = VoteReq)
CTLSPEC EF(eventType = VoteRsp)
CTLSPEC EF(eventType = ClientReq)
CTLSPEC EF(eventType = AppendEReq)
-- 总是有节点处于最新的状态
CTLSPEC AG(⟨!python -c "print(' | '.join([f'isNewest{i}' for i in range(⟨=numNode⟩)]))"⟩)
-- Raft 协议可能因为一致随机撞车导致始终没有 leader
CTLSPEC EG(⟨!python -c "print(' & '.join([f'node{i}.role != Leader' for i in range(⟨=numNode⟩)]))"⟩)
-- 总是有节点可以赢得大部分选票
CTLSPEC EF(oracleWinMajority)
-- 每个节点都可能处于三种状态之一
CTLSPEC EF(node0.role = Follower);
CTLSPEC EF(node0.role = Candidate);
CTLSPEC EF(node0.role = Leader);
-- 每个节点都可以给自己或其他某个节点投票
CTLSPEC EF(node0.votedFor = -1)
CTLSPEC EF(node0.votedFor = 0)
CTLSPEC EF(node0.votedFor = 1)
-- 一个 candidate 总是可以立即发起投票请求
CTLSPEC AG(node0.role = Candidate -> EX (eventType = VoteReq))
-- 一个已经投票的 follower 总是可以立即发送投票响应
CTLSPEC AG(node0.role = Follower & node0.votedFor != -1 -> (EX eventType = VoteRsp))
-- 在第一个 leader 被选出来之前一定发生过 VoteReq
CTLSPEC !E[eventType != VoteReq U node0.role = Leader]
-- 在第一个 leader 被选出来之前一定发生过 VoteRsp（这个性质只有在系统节点数不小于 5 时才有意义）
CTLSPEC !E[eventType != VoteRsp U node0.role = Leader]
-- 有可能出现系统中多个节点处于 leader 状态的情况
CTLSPEC EF(node0.role = Leader & node1.role = Leader)
-- 如果当前存在一个处于最新任期的 leader，那么其他节点不可能立即变成 leader
CTLSPEC AG(node0.role = Leader & isNewest0 & node1.role != Leader -> AX node1.role != Leader)
-- 弱化的 election safety 属性：不可能有两个同时都是处于最新任期的 leader
CTLSPEC !AG(isNewest0 & isNewest1 & node0.role = Leader & node1.role = Leader)
-- 弱化的 election safety 属性：不可能有两个节点同时被选为 leader
CTLSPEC !AG(node0.role != Leader & node1.role != Leader & EX (node0.role = Leader & node1.role = Leader))
-- Log 最后一项的情况可能是 Foo 或者 Bar
CTLSPEC EF(node0.log = LogEmpty)
CTLSPEC EF(node0.log = LastFoo)
CTLSPEC EF(node0.log = LastBar)
-- 弱化的 leader append-only 属性：归纳性质，如果一个节点是 leader，并且下一个状态依然是 leader，那么它下一个状态不会 change log
CTLSPEC EF(node0.logModification = LogChange)
CTLSPEC EF(node0.role = Leader -> EF(node0.logModification = LogChange))
CTLSPEC AG(node0.role = Leader -> AX(node0.role = Leader -> (node0.logModification != LogChange)))
-- 弱化的 log matching 属性：如果两个节点的 log 都是 up-to-date 的，那么它们的 log 必然是相同的
CTLSPEC EF(logUpToDate0)
CTLSPEC EF(!logUpToDate0)
CTLSPEC AG(logUpToDate0 & logUpToDate1 -> node0.log = node1.log)

